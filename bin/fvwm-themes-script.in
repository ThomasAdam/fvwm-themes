#!@PERL@ -w
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

#-----------------------------------------------------------------------------
#     Copyright 2000, Olivier Chapuis
#-----------------------------------------------------------------------------

use Getopt::Long;

my $version = '@VERSION@';
my $fvwmVersion = '@FVWM_VERSION@';

my $scriptName = ($0 =~ m:([^/]+)$:, $1);
my $item = -1;
my $lsOptions = "";
my $type = "";
my $fileOnly = 0;
my $dirOnly = 0;
my $checkExec = "";

GetOptions(
	"help"          => \&showHelp,
	"version"       => \&showVersion,
	"dirs=s"        => \$dirs,
	"ls"            => \$command_ls,
	"ls-opt:s"      => \$lsOptions,
	"type:s"        => \$type,
	"item=i"        => \$item,
	"check-exec=s"    => \$checkExec,
) || wrongUsage();


if ($command_ls) {
	if ("$type" eq "dir") { $dirOnly = 1;}
	elsif ( "$type" eq "file" ) { $fileOnly =1; }
	$return = getLsList($item);
	print "$return";
}
elsif ($checkExec ne "") {
	my $r = checkExecInPath($checkExec);
	print "$r\n";
}

#----------------------------------------------------------------------------
# Proably one can write this with 10 lines ...

sub getLsList {
	my ($item) = @_;
	my ($jd,$jf,$j,$i)=("0", "0", "0", "0");
	my @d=();
	my @f=();
	my @a=();
	my @dirList=();
	my @tmpdirList=();
	my $return = "";
	my $isMultiDir = 0;

	if ($dirs eq "PATH") { $dirs=$ENV{PATH} }
	$dirs =~ /^\:/;
	$dirs =~ /\:$/;
	if ($dirs =~ /\:/) {
		$isMultiDir = 1;
		@tmpdirList = split(':',$dirs);
	} else {
		@tmpdirList = ("$dirs");
	}
	
	my $ok = 0;
	my $tmp;
	for($i=0; defined $tmpdirList[$i]; $i++) {
		if (-d $tmpdirList[$i]) {
			$ok = 1;
			@dirList = (@dirList, $tmpdirList[$i]); 
		}
	}

	return "No such directory\n" unless $ok;			
		
  	for($i=0; defined $dirList[$i]; $i++) {
		open(LSPROC,"ls $lsOptions -1 $dirList[$i] |");
		while(<LSPROC>) {
			chomp;
			$t = $_;
			$t =~ s/.$// if $lsOptions =~ /F/;
			if (-d "$dirList[$i]/$t") {$d[$jd] = $_; $jd++}
			else {$f[$jf] = $_; $jf++}
		}
		close(LSPROC);
	}
	
	$i=$j=0;

	if ($isMultiDir) { @d = sort(@d); @f = sort(@f);}

	if (!$fileOnly) {
		while (defined $d[$i]) {$a[$i]=$d[$i]; $i++}
		$j=$i-- if $i;
		$i=0;
	}
	if (!$dirOnly) {
		while (defined $f[$i]) {$a[$i+$j]=$f[$i];$i++}
	}

	if ($item >= 1) {
		$return = $a[$item-1];
	} else {
		$return = $a[0] if (defined $a[0]);
		for($i=1; defined $a[$i]; $i++) { $return .="|".$a[$i];}
	}
	return $return . "\n";
}


sub checkExecInPath {
	my($app) = @_;
	my @pathDirs = split(':',$ENV{PATH});
	my $dir ="";
	foreach $dir (@pathDirs) {
		if ( -x "$dir/$app" ) { return 1 }
	}
	return 0;
}
