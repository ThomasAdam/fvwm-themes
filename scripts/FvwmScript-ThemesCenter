# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

#-----------------------------------------------------------------------------
# Copyright 2000, Olivier Chapuis
#-----------------------------------------------------------------------------


WindowTitle {Fvwm Themes Center}
WindowSize 600 480
Font		-adobe-helvetica-bold-r-*-*-12-*

Init
Begin
    Do {FvwmScript FvwmScript-NoteMessage "Loading Themes"}
    # Arguments
    Set $i = 1
    Set $arg = (GetScriptArgument $i)
    While $arg <> {} Do
    Begin
	Set $j = (Add $i 1)
	If $arg == {--session} Then
	    Set $Session = (GetScriptArgument $j)
	If $arg == {--viewer-colorset} Then
	    Set $ViewerColorset = (GetScriptArgument $j)
	If $arg == {--text-colorset} Then
	    Set $TextColorset = (GetScriptArgument $j)
	If $arg == {--icon-colorset} Then
	    Set $IconColorset = (GetScriptArgument $j)	
	Set $i = (Add $i 2)
	Set $arg = (GetScriptArgument $i)
    End

    If $TextColorset <> {} Then
    Begin
	ChangeColorset 6 $TextColorset
	ChangeColorset 12 $TextColorset
	ChangeColorset 17 $TextColorset
	ChangeColorset 41 $TextColorset
    End

    If $ViewerColorset <> {} Then
    Begin
	ChangeColorset 95 $ViewerColorset
    End

    # found the FvwmScript pid
    Set $cmd = {perl -e '$t=getppid; print $t . "\n"'}
    Set $pid = (GetOutput $cmd 1 -1)

    # Run fvwm-themes-config until the end of the script
    Do {Exec fvwm-themes-config --com-mode --com-name=config-}$pid{ &}
    
    # to send fvwm-themes-com command
    Set $SendMsgAndGet = {fvwm-themes-com --name config-}$pid{ --lock-and-get --message=}
    Set $SendMsg = {fvwm-themes-com --name config-}$pid{ --message=}
    Set $GetLine = {fvwm-themes-com --name config-}$pid{ --get-buffer --line=}

    # Get the themes list
    Set $cmd = $SendMsgAndGet{"themes-list"}
    Set $ThemesList = (GetOutput $cmd 1 -1)
    ChangeTitle 6 $ThemesList

    # Get the current config
    Set $cmd = $SendMsgAndGet{"current-config"}
    Set $CurrentConfig = (GetOutput $cmd 1 -1)
    ChangeTitle 17 $CurrentConfig

    # Get the session info
    Set $cmd = $SendMsgAndGet{"session-info" --line=1}
    Set $CurrentSession = (GetOutput $cmd 1 -1)
    Set $cmd = $GetLine{2}
    Set $SessionUpTime = (GetOutput $cmd 1 -1)
    Set $tmp = {Current Session: }$CurrentSession{                 Up Time:  }$SessionUpTime
    ChangeTitle 39 $tmp
    Set $cmd = $GetLine{3}
    Set $SessionList = (GetOutput $cmd 1 -1)
    ChangeTitle 41 $SessionList
    Set $cmd = $GetLine{4 --clear-buffer}
    Set $ConfigurationList = (GetOutput $cmd 1 -1)
    ChangeTitle 52 $ConfigurationList
    
    # Common Variables
    Set $SpecialMessage = {}
    Set $NullMessage = 0
    # TS: Themes Selector; GS: General Setting; SM: FT Sessions Management
    Set $ConfigTool = {TS}

    # TS main variables
    Set $ThemeName = {}
    Set $ThemeIndex = 0
    Set $ComponentName = {}
    Set $ComponentIndex = 0
    Set $CSCompIndex = 0
    Set $CSCompName = {}
    Set $CSThemeName = {}
    Set $CSCompHasOpt = 0
    Set $CSCompIsSet = 0
    Set $CSCompCanBeDropped = 0
    Set $OptionEditorOne = {}
    Set $OptionEditorOneTandC = {}
    Set $OptionEditorTwo = {}
    Set $OptionEditorTwoTandC = {}
    Set $OptionEditorLast = {}
    Set $OptionEditorLastTandC = {}

    # SM main variables
    Set $SessionIndex = 0
    Set $SelectedSession = {}
    Set $SMEditorState = 0

    Set $SelFont = {-adobe-helvetica-bold-r-*-*-12-*}
    Set $ShadeFont = {-adobe-helvetica-medium-r-*-*-12-*}
    Set $tmp = 7
    While $tmp <> 10 Do
    Begin
 	ChangeFont $tmp $ShadeFont
	Set $tmp2 = (Add $tmp 6)
	ChangeFont $tmp2 $ShadeFont
	Set $tmp2 = (Add $tmp2 5)
	ChangeFont $tmp2 $ShadeFont
	Set $tmp = (Add $tmp 1)
    End

    # Hide the widgets
    HideWidget 21
    Set $tmp = 39
    While $tmp <> 58 Do
    Begin
	HideWidget $tmp
	Set $tmp = (Add $tmp 1)
    End

    Do {All (FvwmScript-NoteMessage) Delete}
End

# ---------------------------------------------------------------------------
#
# Periodic Task
#
# ---------------------------------------------------------------------------

PeriodicTasks
Begin

#----------------------------------------------------------------------------
# config tool switching

    If $HideThemeChooser == {1} Then
    Begin
	Set $HideThemeChooser = 0
	Set $tmp = 5
	While $tmp <> 10 Do
	Begin
	    HideWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
	Set $tmp = 11
	While $tmp <> 21 Do
	Begin
	    HideWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
    End

    If $HideGeneralSetting == {1} Then
    Begin
	Set $HideGeneralSetting = 0
	Set $tmp = 21
	While $tmp <> 22 Do
	Begin
	    HideWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
    End

    If $HideSession == {1} Then
    Begin
	Set $HideSession = 0
	Set $tmp = 39
	While $tmp <> 57 Do
	Begin
	    HideWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
    End

    If $ShowThemeChooser == {1} Then
    Begin
	Set $ShowThemeChooser = 0
	Set $ConfigTool = {TS}
	Set $tmp = 5
	While $tmp <> 10 Do
	Begin
	    ShowWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
	Set $tmp = 11
	While $tmp <> 21 Do
	Begin
	    ShowWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
    End

    If $ShowGeneralSetting == {1} Then
    Begin
	Set $ShowGeneralSetting = 0
	Set $ConfigTool = {GS}
	Set $tmp = 21
	While $tmp <> 22 Do
	Begin
	    ShowWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
    End

    If $ShowSession == {1} Then
    Begin
	Set $ShowSession = 0
	Set $ConfigTool = {SM}
	Set $tmp = 39
	While $tmp <> 46 Do
	Begin
	    ShowWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
	If $SMEditorState == 0 Then
	Begin
	    ShowWidget 46
	    ShowWidget 47
	    ShowWidget 48
	End
	Else
	Begin
	    Set $tmp = 49
	    While $tmp <> 55 Do
	    Begin
		ShowWidget $tmp
		Set $tmp = (Add $tmp 1)
	    End
	    If $SMEditorState == 1 Then
		ShowWidget 55
	    Else
		ShowWidget 56
	End
	Set $UpdateSessionUpTime = 1
    End

#-----------------------------------------------------------------------------
# TS

# -----------------------------------------------
# Message to read

    If $OptionEditorOne <> {} Then
    Begin
	Set $MSG = (ReceivFromScript $OptionEditorOne)
	If $MSG <> {No message} Then
	Begin
	    If $MSG == {quit} Then
	    Begin
		#SendToScript $OptionEditorOne {exit}
		Set $OptionEditorOne = {}
		Set $OptionEditorOneTandC = {}
	    End
	    If $MSG == {update} Then
	    Begin
		Set $UpdateCurrentConfig = 1
	    End
	    If $MSG == {updatequit} Then
	    Begin
		#SendToScript $OptionEditorOne {exit}
		Set $OptionEditorOne = {}
		Set $OptionEditorOneTandC = {}
		Set $UpdateCurrentConfig = 1
	    End
	End
    End

    If $OptionEditorTwo <> {} Then
    Begin
	Set $MSG = (ReceivFromScript $OptionEditorTwo)
	If $MSG <> {No message} Then
	Begin
	    If $MSG == {quit} Then
	    Begin
		Set $OptionEditorTwo = {}
		Set $OptionEditorTwoTandC = {}
	    End
	    If $MSG == {update} Then
	    Begin
		Set $UpdateCurrentConfig = 1
	    End
	    If $MSG == {updatequit} Then
	    Begin
		Set $OptionEditorTwo = {}
		Set $OptionEditorTwoTandC = {}
		Set $UpdateCurrentConfig = 1
	    End
	End
    End

    If $OptionEditorLast <> {} Then
    Begin
	Set $MSG = (ReceivFromScript $OptionEditorLast)
	If $MSG <> {No message} Then
	Begin
	    If $MSG == {quit} Then
	    Begin
		Set $OptionEditorLast = {}
		Set $OptionEditorLastTandC = {}
	    End
	    If $MSG == {update} Then
	    Begin
		Set $UpdateCurrentConfig = 1
	    End
	    If $MSG == {updatequit} Then
	    Begin
		Set $OptionEditorLast = {}
		Set $OptionEditorLastTandC = {}
		Set $UpdateCurrentConfig = 1
	    End
	End
    End

#------------------------------------------------
# update Theme Selectors List
	
    If $UpdateTSLists == {1} Then
    Begin
	Set $UpdateTSLists = 0
	Set $cmd = $SendMsgAndGet{"themes-list"}
	Set $ThemesList = (GetOutput $cmd 1 -1)
	ChangeTitle 6 $ThemesList

	If $ThemeIndex <> 0 Then
	Begin
	    Set $cmd = $SendMsgAndGet{"theme-components }$ThemeIndex{"}
	    Set $ThemeComponents = (GetOutput $cmd 1 -1)
	    ChangeTitle 12 $ThemeComponents
	End

	Set $UpdateCurrentConfig = 1
    End

    If $UpdateCurrentConfig == 1 Then
    Begin
	Set $UpdateCurrentConfig = 0
	Set $cmd = $SendMsgAndGet{"current-config"}
	Set $CurrentConfig = (GetOutput $cmd 1 -1)
	ChangeTitle 17 $CurrentConfig

	# this is needed only if $CSCompIndex item of the current config
	# list has been modified ....
	Set $UpdateCurrentConfigLine = 1
    End

    If $UpdateCurrentConfigLine == 1 Then
    Begin
	Set $UpdateCurrentConfigLine = 0
	If $CSCompIndex <> 0 Then
	Begin
	    Set $cmd = $SendMsgAndGet{"current-comp-name }$CSCompIndex{" --line 1}
	    Set $CSCompName = (GetOutput $cmd 1 -1)
	    Set $cmd = $GetLine{2}
	    Set $CSThemeName = (GetOutput $cmd 1 -1)
	    Set $cmd = $GetLine{3 --clear-buffer}
	    Set $tmp = (GetOutput $cmd 1 -1)
	    Set $CSCompHasOpt = (StrCopy $tmp 1 1)
	    Set $CSCompIsSet = (StrCopy $tmp 2 2)
	    Set $CSCompCanBeDropped = (StrCopy $tmp 3 3)
	    Set $UpdateCSButtons = 1
	End
    End

    If $UpdateCSButtons == 1 Then
    Begin
	Set $UpdateCSButtons = 0
	If $CSCompHasOpt == 1 Then
	    ChangeFont 18 $SelFont
	Else
	    ChangeFont 18 $ShadeFont
	If $CSCompIsSet == 1 Then
	    ChangeFont 19 $SelFont
	Else
	    ChangeFont 19 $ShadeFont   
	If $CSCompCanBeDropped == 1 Then
	    ChangeFont 20 $SelFont
	Else
	    ChangeFont 20 $ShadeFont
    End
	
#----------------------------------------------------------------------------
# SM

    If $ConfigTool == {SM} Then
    Begin
	If (RemainderOfDiv (GetTime) 60)== 0 Then
	    Set $UpdateSessionUpTime = 1
    End

    If $UpdateSessionUpTime == 1 Then
    Begin
	Set $UpdateSessionUpTime = 0
	Set $cmd = $SendMsgAndGet{"session-uptime"}
	Set $SessionUpTime = (GetOutput $cmd 1 -1)
	Set $tmp = {Current Session: }$CurrentSession{                 Up Time:  }$SessionUpTime
	ChangeTitle 39 $tmp
    End

    If $ShowSMEditor == 1 Then
    Begin
	Set $ShowSMEditor = 0
	HideWidget 46
	HideWidget 47
	HideWidget 48
	If $SMEditorState == 3 Then
	Begin
	    ShowWidget 57
	    ShowWidget 54
	    ShowWidget 53
	    ChangeTitle 53 {Yes}
	    ChangeTitle 54 {No}
	End
	Else
	Begin
	    Set $tmp = 49
	    While $tmp <> 55 Do
	    Begin
		ShowWidget $tmp
		Set $tmp = (Add $tmp 1)
	    End  
	    If $SMEditorState == 1 Then
		ShowWidget 55
	    Else
		ShowWidget 56
	    ChangeTitle 53 {Ok}
	    ChangeTitle 54 {Cancel}
	End
    End

    If $HideSMEditor == 1 Then
    Begin
	Set $HideSMEditor = 0 
	Set $tmp = 49
	While $tmp <> 58 Do
	Begin
	    HideWidget $tmp
 	    Set $tmp = (Add $tmp 1)
	End
	ShowWidget 46
	ShowWidget 47
	ShowWidget 48
	Set $SMEditorState = 0
    End

    If $UpdateSMLists == 1 Then
    Begin
	Set $UpdateSMLists = 0
        Set $cmd = $SendMsgAndGet{"session-info" --line=1}
	Set $CurrentSession = (GetOutput $cmd 1 -1)
	Set $cmd = $GetLine{2}
	Set $SessionUpTime = (GetOutput $cmd 1 -1)
	Set $tmp = {Current Session: }$CurrentSession{                 Up Time:  }$SessionUpTime
	ChangeTitle 39 $tmp
	Set $cmd = $GetLine{3}
	Set $SessionList = (GetOutput $cmd 1 -1)
	ChangeTitle 41 $SessionList
	ChangeValue 41 $SessionIndex
	Set $cmd = $GetLine{4 --clear-buffer}
	Set $ConfigurationList = (GetOutput $cmd 1 -1)
	ChangeTitle 52 $ConfigurationList
    End

#----------------------------------------------------------------------------
# TS, GS and SM
 
    If $NullMessage == {1} Then
    Begin
	Set $NullMessage = 0
	Set $msg = {}
	ChangeTitle 95 $msg
    End

    If $SpecialMessage <> {} Then
    Begin
	ChangeTitle 95 $SpecialMessage
	Set $SpecialMessage = {}
    End

End

# ---------------------------------------------------------------------------
#
# Now the widgets
#
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
#
# Head: GUI chooser and rectangle delimiter
#
# ---------------------------------------------------------------------------

Widget 1
Property
    Flags NoReliefString
    Position 110 10
    Type ItemDraw
    Title {Configuration Tools:}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 2
Property
    Flags NoReliefString
    Position 270 5
    Type PopupMenu
    Title {       Themes Selector        |       General Settings        |        FVWM Themes Sessions     }

Main
Case message of
 SingleClic :
 Begin
    Set $tmp = (GetValue 2)
    If $tmp == 1 Then
    Begin
	Set $ShowThemeChooser = 1
	Set $HideSession = 1
	Set $HideGeneralSetting = 1
    End
    If $tmp == 2 Then
    Begin
	Set $HideThemeChooser = 1
	Set $HideSession = 1
	Set $ShowGeneralSetting = 1
    End
    If $tmp == 3 Then
    Begin
	Set $HideThemeChooser = 1
	Set $HideGeneralSetting = 1
	Set $ShowSession = 1
    End
    Set $NullMessage = 1
 End
End


Widget 3
Property
    Size 590 410
    Position 5 35
    Type Rectangle
Main
Case message of
    SingleClic :
    Begin
    End
End

#-----------------------------------------------------------------------------
#
# Theme Chooser
#
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# List of themes

Widget 5
Property
    Flags NoReliefString
    Position 30 45
    Size 255 20
    Type ItemDraw
    Title {List of Themes:}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 6
Property
    Flags NoReliefString
    Position 30 65
    Size 255 150
    Font fixed
    Type List
    Title {}
Main
Case message of
SingleClic :
 Begin
    Set $index = (GetValue 6)
    If $index <> $ThemeIndex Then
    Begin
	Set $tmp = 7
	While $tmp <> 10 Do
	Begin
	    ChangeFont $tmp $SelFont
	    Set $tmp = (Add $tmp 1)
	End  
	Set $ThemeIndex = $index
	Set $cmd = $SendMsgAndGet{"theme-components }$ThemeIndex{" --line=1}
	Set $ThemeComponents = (GetOutput $cmd 1 -1)
	ChangeTitle 12 $ThemeComponents
	Set $cmd = $GetLine{2}
	Set $ThemeName=(GetOutput $cmd 1 -1)
	Set $t = $ThemeName{ Components}
	ChangeTitle 11 $t
	Set $cmd = $GetLine{3 --clear-buffer}
	Set $ThemeDir=(GetOutput $cmd 1 -1)

	Set $NullMessage = 1
	Set $ComponentName = {}
	ChangeValue 12 0
	Set $tmp = 13
	While $tmp <> 16 Do
	Begin
	    ChangeFont $tmp $ShadeFont
	    Set $tmp = (Add $tmp 1)
	End
    End
 End
End


Widget 7
Property
    Flags NoReliefString
    Position 35 225
    Type PushButton
    Title {ReadMe}
Main
Case message of
 SingleClic :
 Begin
    If $ThemeName == {} Then
    Begin
	Set $msg = {Warn: You must select a theme}
 	ChangeTitle 95 $msg
    End
    Else
    Begin
	Do {FuncFvwmViewFile }$ThemeDir{/README}
	Set $NullMessage = 1
    End
 End
End

Widget 8
Property
    Flags NoReliefString
    Position 120 225
    Type PushButton
    Title {Load All}
Main
 Case message of
 SingleClic :
 Begin
    If $ThemeName == {} Then
    Begin
	Set $msg = {Warn: You must select a theme}
 	ChangeTitle 95 $msg
    End
    Else
    Begin
	Set $cmd = $SendMsgAndGet{"load-all }$ThemeName{"}
	Set $dummy = (GetOutput $cmd 1 -1)
	Set $NullMessage = 1
	Set $UpdateTSLists = 1
    End
 End
End

Widget 9
Property
    Flags NoReliefString
    Position 200 225
    Type PushButton
    Title {Load Look}
Main
 Case message of
 SingleClic :
 Begin
    If $ThemeName == {} Then
    Begin
	Set $msg = {Warn: You must select a theme}
 	ChangeTitle 95 $msg
    End
    Else
    Begin
	Set $cmd = $SendMsgAndGet{"load-main-look }$ThemeName{"}
	Set $dummy = (GetOutput $cmd 1 -1)
	Set $NullMessage = 1
	Set $UpdateTSLists = 1
    End
  End
End

#-----------------------------------------------------------------------------
# List of component of a theme

Widget 11
Property
    Flags NoReliefString
    Position 315 45
    Size 255 20
    Type ItemDraw
    Title {No Themes Selected}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 12
Property
    Flags NoReliefString
    Position 315 65
    Size 255 150
    Font fixed
    Type List
    Title {}
Main
Case message of
 SingleClic :
 Begin
    Set $ComponentIndex = (GetValue 12)
    If $ThemeName <> {} Then
    Begin
	# 14 and 15 are not yet avaiable
	ChangeFont 13 $SelFont
	Set $cmd = $SendMsgAndGet{"component-name }$ThemeName{ }$ComponentIndex{"}
	Set $ComponentName = (GetOutput $cmd 1 -1)
	Set $NullMessage = 1
    End
 End
End


Widget 13
Property
    Flags NoReliefString
    Position 335 225
    Type PushButton
    Title { Load }
Main
Case message of
 SingleClic :
 Begin
    If $ComponentName == {} Then
    Begin
	Set $msg = {Warn: you must select a theme component}
	ChangeTitle 95 $msg
    End
    Else
    Begin
	Set $cmd = $SendMsgAndGet{"load-one }$ThemeName{ }$ComponentName{"}
	Set $dummy = (GetOutput $cmd 1 -1)
	Set $NullMessage = 1
	Set $UpdateTSLists = 1
    End
 End
End

Widget 14
Property
    Flags NoReliefString
    Position 416 225
    Type PushButton
    Title { Info }
Main
Case message of
 SingleClic :
 Begin
    If $ComponentName == {} Then
    Begin
	Set $msg = {Warn: you must select a theme component}
	ChangeTitle 95 $msg
    End
    Else
    Begin
	Set $msg = {Msg: Help is not available yet}
	ChangeTitle 95 $msg
    End
 End
End


Widget 15
Property
    Flags NoReliefString
    Position 495 225
    Type PushButton
    Title { View }
Main
Case message of
 SingleClic :
 Begin
	Set $msg = {Msg: ScreenShots are not available yet}
	ChangeTitle 95 $msg
 End
End

#-----------------------------------------------------------------------------
# Current/setted Config

Widget 16
Property
    Flags NoReliefString
    Position 30 265
    Size 445 20
    Type ItemDraw
    Title {Used and Set Theme Configuration:}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 17
Property
    Flags NoReliefString
    Position 30 290
    Size 445 110
    Font fixed
    Type List
    Title {}
Main
Case message of
SingleClic :
 Begin
    Set $index = (GetValue 17)
    If $index <> $CSCompIndex Then
    Begin
	Set $CSCompIndex = $index
	Set $UpdateCurrentConfigLine = 1
	Set $NullMessage = 1
    End
 End
End

Widget 18
Property
    Flags NoReliefString
    Position 490 295
    Type PushButton
    Title {  Properties  }
Main
Case message of
SingleClic :
 Begin

    Set $break = 1
    Set $test = 0
    If $CSCompIndex == 0 Then
    Begin
	Set $msg = {Warn: You must select a Used/Set component}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    If $CSCompHasOpt == 0 Then
	Set $test = 1
    Set $test = (Mult $break $test) 
    If $test == 1 Then
    Begin
	Set $msg = {Warn: This Used/Set component has no options, choices neither subcomponents}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    If $break == 1 Then
    Begin
	Set $break = 0
	Set $tmp = $CSCompName{@}$CSThemeName
	Set $arg={FvwmScript-ThemeOptions --text-colorset }$TextColorset{ --com-pid }$pid{ --component }$CSCompName{ --theme }$CSThemeName
	If $tmp == $OptionEditorOneTandC Then
	    Set $break = 1
	If $tmp == $OptionEditorTwoTandC Then
	    Set $break = 1
	If $tmp == $OptionEditorLastTandC Then
	    Set $break = 1
	If $break == 1 Then
	Begin
	    Set $msg = {Warn: Option editors for }$tmp{ already active}
	    ChangeTitle 95 $msg
	End
	Else
	Begin
	    Set $break = 1
	    If $OptionEditorOne == {} Then
	    Begin
		Set $OptionEditorOne = (LaunchScript $arg)
		Set $OptionEditorOneTandC = $tmp
		Set $break = 0
		Set $NullMessage = 1
	    End
	    If $OptionEditorTwo == {} Then
		Set $test = 1
	    Set $test = (Mult $test $break)
	    If $test == 1 Then
	    Begin
		Set $OptionEditorTwo = (LaunchScript $arg)
		Set $OptionEditorTwoTandC = $tmp
		Set $break = 0
		Set $NullMessage = 1
	    End
	    If $OptionEditorLast == {} Then
		Set $test = 1
	    Set $test = (Mult $test $break)
	    If $test == 1 Then
	    Begin
		Set $OptionEditorLast = (LaunchScript $arg)
		Set $OptionEditorLastTandC = $tmp
		Set $break = 0
		Set $NullMessage = 1
	    End
	    If $break == 1 Then
	    Begin
		Set $msg = {Warn: Number of Options editor is limited to 3}
		ChangeTitle 95 $msg
	    End
	End
    End
 End
End

Widget 19
Property
    Flags NoReliefString
    Position 490 330
    Type PushButton
    Title {    Restore   }
Main
Case message of
SingleClic :
 Begin
    Set $break = 1
    Set $test = 0
    If $CSCompIndex == 0 Then
    Begin
	Set $msg = {Warn: You must select a Used/Set component}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    If $CSCompIsSet == 0 Then
	Set $test = 1
    Set $test = (Mult $break $test) 
    If $test == 1 Then
    Begin
	Set $msg = {Warn: This Used/Set component is not set!}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    If $break == 1 Then
    Begin
	Set $cmd = $SendMsgAndGet{"restore }$CSCompName{"}
	Set $dummy = (GetOutput $cmd 1 -1)
	Set $UpdateTSLists = 1
	Set $NullMessage = 1
	If $OptionEditorOne <> {} Then
	    SendToScript $OptionEditorOne {update}
	If $OptionEditorTwo <> {} Then
	    SendToScript $OptionEditorTwo {update}
	If $OptionEditorLast <> {} Then
	    SendToScript $OptionEditorLast {update}
    End
 End
End

Widget 20
Property
    Flags NoReliefString
    Position 490 365
    Type PushButton
    Title {      Drop      }
Main
Case message of
SingleClic :
 Begin
    Set $break = 1
    Set $test = 0
    If $CSCompIndex == 0 Then
    Begin
	Set $msg = {Warn: You must select a Used/Set component}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    If $CSCompCanBeDropped == 0 Then
	Set $test = 1
    Set $test = (Mult $break $test) 
    If $test == 1 Then
    Begin
	Set $msg = {Warn: This Used/Set component has no options}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    If $break == 1 Then
    Begin
	Set $msg = {Msg: Drop will be implemented one day!}
	ChangeTitle 95 $msg
    End
 End
End

#-----------------------------------------------------------------------------
#
# General Settings Configuration
#
#-----------------------------------------------------------------------------

Widget 21
Property
    Flags NoReliefString
    Position 50 200
     Type ItemDraw
    Title {Work In Progress!!!!!!!!!!!!!!!}
Main
Case message of
    SingleClic :
    Begin
    End
End

#-----------------------------------------------------------------------------
#
# FT Sessions
#
#-----------------------------------------------------------------------------
Widget 39
Property
    Flags NoReliefString
    Position 20 45
    Size 560 20
    Type ItemDraw
    Title {                                                       }
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 40
Property
    Flags NoReliefString
    Position 40 75
    Size 255 20
     Type ItemDraw
    Title {List of FVWM Themes Sessions}
Main
Case message of
SingleClic :
 Begin
 End
End

Widget 41
Property
    Flags NoReliefString
    Position 40 100
    Size 255 150
    Font fixed
    Type List
    Title {}
Main
Case message of
SingleClic :
 Begin
    Set $break = 1
    If $SMEditorState <> 0 Then
    Begin
	Set $msg = {Warn: You do not finish to edit (click on Cancel or Ok)}
	ChangeTitle 95 $msg
	Set $break = 0
	ChangeValue 41 $SessionIndex
    End
    If $break == 1 Then
    Begin
	Set $SessionIndex = (GetValue 41)
	Set $cmd = $SendMsgAndGet{"session-name }$SessionIndex{"}
	Set $SelectedSession = (GetOutput $cmd 1 -1)
	If $SelectedSession <> {} Then
	    Set $tmp = {Selected Session: }$SelectedSession
	Else
	Begin
	    Set $tmp = {Selected Session:}
	    Set $SessionIndex = 0
	End
	ChangeTitle 45 $tmp
	Set $NullMessage = 1
    End
 End
End

Widget 42
Property
    Flags NoReliefString
    Position 330 115
    Type PushButton
    Title {      Edit       }
Main
Case message of
SingleClic :
 Begin
    Set $break = 1
    If $SelectedSession == {} Then
    Begin
	Set $msg = {Warn: You must select a session}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    Set $test = 0
    If $SMEditorState <> 0 Then
	Set $test = 1
    Set $test = (Mult $break $test)
    If $test == 1 Then
    Begin
	Set $msg = {Warn: You do not finish to edit (click on Cancel or Ok)}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    
    If $break == 1 Then
    Begin
	If $SelectedSession == {main} Then
	Begin
	    ChangeTitle 56 $SelectedSession
	    Set $SMEditorState = 2
	End
	Else
	Begin
	    Set $SMEditorState = 1
	    ChangeTitle 55 $SelectedSession
	End
	Set $tmp = {Edit }$SelectedSession{ session}
	ChangeTitle 49 $tmp
	Set $tmp = (Add $SessionIndex 1)
	ChangeValue 52 $tmp
	Set $SMEditorType = {Edit}
	Set $ShowSMEditor = 1
	Set $NullMessage = 1    
    End
 End
End

Widget 43
Property
    Flags NoReliefString
    Position 330 160
    Type PushButton
    Title {      Add       }
Main
Case message of
SingleClic :
 Begin
    Set $break = 1
    If $SMEditorState <> 0 Then
    Begin
	Set $msg = {Warn: You do not finish to edit (click on Cancel or Ok)}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    
    If $break == 1 Then
    Begin
	Set $SMEditorState = 1
	ChangeTitle 55 {}
	ChangeValue 52 1
	Set $tmp = {Add a new session}
	ChangeTitle 49 $tmp
	Set $SMEditorType = {Add}
	Set $ShowSMEditor = 1
	Set $NullMessage = 1
    End
 End
End

Widget 44
Property
    Flags NoReliefString
    Position 330 205
    Type PushButton
    Title {   Remove   }
Main
Case message of
SingleClic :
 Begin
    Set $break = 1
    If $SelectedSession == {} Then
    Begin
	Set $msg = {Warn: You must select a session}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    Set $test = 0
    If $SMEditorState <> 0 Then
	Set $test = 1
    Set $test = (Mult $break $test)
    If $test == 1 Then
    Begin
	Set $msg = {Warn: You do not finish to edit (click on Cancel or Ok)}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    Set $test = 0
    If $SelectedSession == {main} Then
	Set $test = 1
    Set $test = (Mult $break $test)
    If $test == 1 Then
    Begin
	Set $msg = {Warn: You cannot remove the main session!}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    Set $test = 0
    If $SelectedSession == $CurrentSession Then
	Set $test = 1
    Set $test = (Mult $break $test)
    If $test == 1 Then
    Begin
	Set $msg = {Warn: You cannot remove the Current session!}
	ChangeTitle 95 $msg
	Set $break = 0
    End
    If $break == 1 Then
    Begin
	Set $ShowSMEditor = 1
	Set $SMEditorState = 3
	Set $SMEditorType = {Remove}
	Set $tmp = { Really Remove }$SelectedSession{ Session?}
	ChangeTitle 57 $tmp
	Set $NullMessage = 1
    End
 End
End

Widget 45
Property
    Flags NoReliefString
    Position 50 260
    Type ItemDraw
    Title {Selected Session:                  }
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 46
Property
    Flags NoReliefString
    Position 70 315
    Type ItemDraw
    Font fixed
    Title {* To load a session, select it and click on Apply}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 47
Property
    Flags NoReliefString
    Position 70 335
    Type ItemDraw
    Font fixed
    Title {* To Reload the current session, click on Refresh}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 48
Property
    Flags NoReliefString
    Position 70 355
    Type ItemDraw
    Font fixed
    Title {* A click on "Update" will rebuild the session list}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 49
Property
    Flags NoReliefString
    Size 510 20
    Position 45 290
    Type ItemDraw
    Title {       Edit main session      }
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 50
Property
    Flags NoReliefString
    Position 55 330
    Type ItemDraw
    Title {Session Name:}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 55
Property
    Flags NoReliefString
    Position 160 325
    Size 130 20
    Type TextField
    Title {}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 56
Property
    Flags NoReliefString
    Position 160 330
    Type ItemDraw
    Title {                }
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 51
Property
    Flags NoReliefString
    Position 320 330
    Type ItemDraw
    Title {Use:}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 52
Property
    Flags NoReliefString
    Position 360 325
    Type PopupMenu
    Title {   Default Configuration   }
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 53
Property
    Flags NoReliefString
    Position  185 365
    Type PushButton
    Title {    OK    }
Main
Case message of
SingleClic :
 Begin
    Set $break = 1 
    Set $session = {main}
    If $SMEditorState == 1 Then
	Set $session = (GetTitle 55)
    Set $config = (GetValue 52)
    If $SMEditorType == {Edit} Then
	Set $cmd = $SendMsgAndGet{"edit-session }$SelectedSession{:}$session{:}$config{"}
    If $SMEditorType == {Add} Then
	Set $cmd = $SendMsgAndGet{"add-session }$session{:}$config{"}
    If $SMEditorType == {Remove} Then
    Begin
	Set $cmd = $SendMsgAndGet{"remove-session }$SelectedSession{" --line=1}
	Set $session = (GetOutput $cmd 1 -1)
	Set $cmd = $GetLine{2 --clear-buffer}
    End
    Set $tmp = (GetOutput $cmd 1 -1)
    If $tmp == {Err1} Then
    Begin
	Set $break = 0
	Set $msg = {Err: The name of the session is not valid!}
	ChangeTitle 95 $msg
    End
    If $tmp == {Err2} Then
    Begin
	Set $break = 0
	Set $msg = {Err: The name of the session is already used!}
	ChangeTitle 95 $msg
    End
    If $tmp == {Err3} Then
    Begin
	Set $break = 0
	Set $msg = {Err: An Unknown "system" error happen, GASP!}
	ChangeTitle 95 $msg
    End
    If $break == 1 Then
    Begin
	If $SMEditorType == {Add} Then
	Begin
	    Set $msg = {Msg: Adding }$session{ FVWM Themes Session}
	    ChangeTitle 95 $msg
	End
	If $SMEditorType == {Edit} Then
	Begin
	    Set $msg = {Msg: Applying Changes To }$session{ FVWM Themes Session}
	    ChangeTitle 95 $msg
	End
	If $SMEditorType == {Remove} Then
	Begin
	    Set $msg = {Msg: Removing }$SelectedSession{ FVWM Themes Session}
	    ChangeTitle 95 $msg
	End
	ChangeValue 41 $tmp
	Set $SessionIndex = $tmp
	Set $SelectedSession = $session
	Set $t = {Selected Session: }$SelectedSession
	ChangeTitle 45 $t
	If $SMEditorType <> {Remove} Then
	    Set $SpecialMessage = {Msg: Click on Apply to load your "new" session}
	Else
	    Set $NullMessage = 1
	Set $HideSMEditor = 1
	# this update also the current session ...
	Set $UpdateSMLists = 1
    End
 End
End

Widget 54
Property
    Flags NoReliefString
    Position 345 365
    Type PushButton
    Title {  Cancel  }
Main
Case message of
SingleClic :
 Begin
    Set $HideSMEditor = 1
    Set $NullMessage = 1         
 End
End

Widget 57
Property
    Flags NoReliefString
    Size 510 20
    Position 45 320
    Type ItemDraw
    Title {  Really Remove session Session?  }
Main
Case message of
    SingleClic :
    Begin
    End
End

#-----------------------------------------------------------------------------
#
# Message, Apply, quit, ...
#
#-----------------------------------------------------------------------------

Widget 95
Property
    Flags NoReliefString
    Position 20 417
    Size 560 20
    Type ItemDraw
    Title {Msg: Warning and infomation messages are displayed here}
Main
Case message of
    SingleClic :
    Begin
    End
End

Widget 96
Property
    Flags NoReliefString
    Position 55 450
    Type PushButton
    Title {Apply}
Main
Case message of
 SingleClic :
 Begin
    If $ConfigTool == {SM} Then
    Begin
	Set $break = 0
	If $SelectedSession == {} Then
	Begin
	    Set $msg = {Warn: No session are selected}
	    ChangeTitle 95 $msg
	    Set $break = 1
	End
	#If $SelectedSession == $CurrentSession Then
	#Begin
	#   Set $msg = {Warn: You already use }$CurrentSession{ session}
	#   ChangeTitle 95 $msg
	#   Set $break = 1
	#End
	If $break == 0 Then
	Begin
	    Set $msg = {Msg: Switching to }$SelectedSession{ Session}
	    ChangeTitle 95 $msg
	    Set $cmd = $SendMsgAndGet{"apply-sm }$SelectedSession{"}
	    Set $tmp = (GetOutput $cmd 1 -1)
	    Set $UpdateSMLists = 1
	    Set $UpdateTSLists = 1
	    If $OptionEditorOne <> {} Then
		SendToScript $OptionEditorOne {exit}
	    If $OptionEditorTwo <> {} Then
		SendToScript $OptionEditorTwo {exit}
	    If $OptionEditorLast <> {} Then
		SendToScript $OptionEditorLast {exit}
	    Set $NullMessage = 1
	    Do {FuncFvwmThemesFresh}
	End
    End

    If $ConfigTool == {TS} Then
    Begin
	Set $msg = {Msg: Applyin new theme configurations}
	ChangeTitle 95 $msg
	Set $cmd = $SendMsgAndGet{"apply-ts-cmd-opts"}
	Set $CmdOptions = (GetOutput $cmd 1 -1)
	If $CmdOptions <> {} Then
	Begin
	    #Do {Echo }$CmdOptions
	    Do {FuncFvwmThemesConfigAndUpdate "}$CmdOptions{"}
	    If $ConfigTool == {TS} Then
	    Begin
		Set $UpdateTSLists = 1
		If $OptionEditorOne <> {} Then
		    SendToScript $OptionEditorOne {update}
		If $OptionEditorTwo <> {} Then
		    SendToScript $OptionEditorTwo {update}
		If $OptionEditorLast <> {} Then
		    SendToScript $OptionEditorLast {update}
	    End
	    If $ConfigTool == "GS" Then
		Set $UpdateGSLists = 1
	    Set $NullMessage = 1
	End
	Else
	Begin
	    Set $msg = {Warn: No new components are set}
	    ChangeTitle 95 $msg
	End
    End
 End
End

Widget 97
Property
    Flags NoReliefString
    Position 165 450
    Type PushButton
    Title {Refresh}
Main
Case message of
 SingleClic :
 Begin
    #If $ConfigTool == {TS} Then
    #Begin
	Set $msg = {Msg: Refresh current configuration}
	ChangeTitle 95 $msg
	Set $cmd = $SendMsgAndGet{"update 1"}
	Set $dummy = (GetOutput $cmd 1 -1)
	Do {FuncFvwmThemesFresh}
	Set $UpdateSMLists = 1
	Set $UpdateTSLists = 1
	If $OptionEditorOne <> {} Then
	    SendToScript $OptionEditorOne {update}
	If $OptionEditorTwo <> {} Then
	    SendToScript $OptionEditorTwo {update}
	If $OptionEditorLast <> {} Then
	    SendToScript $OptionEditorLast {update}
	Set $NullMessage = 1
    #End
 End
End

Widget 94
Property
    Flags NoReliefString
    Position 285 450
    Type PushButton
    Title {Update}
Main
Case message of
 SingleClic :
 Begin
    #If $ConfigTool == {TS} Then
    #Begin
	Set $msg = {Msg: Update current configuration}
	ChangeTitle 95 $msg
	Set $cmd = $SendMsgAndGet{"update 0"}
	Set $dummy = (GetOutput $cmd 1 -1)
	Set $UpdateTSLists = 1
	Set $UpdateSMLists = 1
	If $OptionEditorOne <> {} Then
	    SendToScript $OptionEditorOne {update}
	If $OptionEditorTwo <> {} Then
	    SendToScript $OptionEditorTwo {update}
	If $OptionEditorLast <> {} Then
	    SendToScript $OptionEditorLast {update}
	Set $NullMessage = 1    
    #End
 End
End

Widget 98
Property
    Flags NoReliefString
    Position 400 450
    Type PushButton
    Title {Help}
Main
 Case message of
  SingleClic :
  Begin
    Set $arg={FvwmScript-Help --text-colorset }$TextColorset{ --message "                    Documentation in progress" --title "Help for the The Themes Center}
    Set $dummy = (LaunchScript $arg)
  End
End

Widget 99
Property
    Flags NoReliefString
    Position 505 450
    Type PushButton
    Title {Quit}
Main
 Case message of
  SingleClic :
  Begin
    If $OptionEditorOne <> {} Then
	SendToScript $OptionEditorOne {exit}
    If $OptionEditorTwo <> {} Then
	SendToScript $OptionEditorTwo {exit}
    If $OptionEditorLast <> {} Then
	SendToScript $OptionEditorLast {exit}
    Set $cmd = $SendMsg{"exit"}	
    Do {Exec }$cmd
    Quit
  End
End
